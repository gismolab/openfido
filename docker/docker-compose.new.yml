version: '3'
services:


  # minio:
  #   image: minio/minio
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - datastore:/data
  #   environment:
  #     - "MINIO_ACCESS_KEY=minio_access_key"
  #     - "MINIO_SECRET_KEY=minio123"
  #   command: server /data
  # blobstorage:
  #   image: minio/mc
  #   depends_on:
  #     - minio
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc alias set myminio http://minio:9000 minio_access_key minio123;
  #     /usr/bin/mc mb myminio/workflow-data;
  #     /usr/bin/mc policy set public myminio/workflow-data;
  #     exit 0;
  #     "
  # blobstorage:
  #   image: minio/minio
  #   restart: "unless-stopped"
  #   volumes:
  #       - datastore:/data
  #   environment:
  #       MINIO_ROOT_USER: minio_access_key
  #       MINIO_ROOT_PASSWORD: minio123
  #   # Allow all incoming hosts to access the server by using 0.0.0.0
  #   command: server --address 0.0.0.0:9000 --console-address ":9001" /data
  #   ports:
  #       # Bind explicitly to 127.0.0.1
  #       - "127.0.0.1:9000:9000"
  #       - "9001:9001"
  #   healthcheck:
  #       test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
  #       interval: 30s
  #       timeout: 20s
  #       retries: 3
  blobstorage:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio123
    volumes:
      - ./uploads:/data:delegated
    ports:
      - "10000:9000"

  # blobstorage:
  #   image: minio/minio
  #   command: server /data
  #   environment:
  #     MINIO_ACCESS_KEY: minio_access_key
  #     MINIO_SECRET_KEY: minio123
  #   volumes:
  #     - ./uploads:/data:delegated
  #   ports:
  #     - "9000:9000"
  # minio:
  #   image: minio/minio
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - ./test/.minio/data:/export
  #     - ./test/.minio/config:/root/.minio
  #   environment:
  #     - "MINIO_ACCESS_KEY=minio_access_key"
  #     - "MINIO_SECRET_KEY=minio123"

  # blobstorage:
  #   image: garland/aws-cli-docker
  #   links:
  #     - minio
  #   command: >
  #     /bin/sh -c "
  #       while ! wget -q -S http://minio:9000/minio/login; do sleep 1; done;
  #       aws configure set default.s3.signature_version s3v4;
  #       aws configure set default.region us-east-1;
  #       aws s3api create-bucket \
  #         --bucket workflow-data \
  #         --endpoint-url=http://minio:9000;
  #       exit 0;
  #     "
  #   environment:
  #     - "AWS_ACCESS_KEY_ID=minio_access_key"
  #     - "AWS_SECRET_ACCESS_KEY=minio123"
  workflow-queue:
    build:
      context: openfido-workflow-service/
      dockerfile: Dockerfile.rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit-user
      RABBITMQ_DEFAULT_PASS: rabbit-password
      RABBITMQ_DEFAULT_VHOST: api-queue
  workflow-db:
    image: postgres:11
    environment:
      POSTGRES_DB: workflowservice
      POSTGRES_PASSWORD: dev-password
    volumes:
      - workflow_data:/var/lib/postgresql/data

  workflow-service:
    build: openfido-workflow-service/
    environment:
      PGDATABASE: workflowservice
      PGUSER: postgres
      PGHOST: workflow-db
      FLASK_APP: run.py
      FLASK_ENV: development
      SECRET_KEY: local-dev-db
      SQLALCHEMY_DATABASE_URI: postgresql://postgres:dev-password@workflow-db/workflowservice
      CELERY_BROKER_URL: amqp://rabbit-user:rabbit-password@workflow-queue/api-queue
      S3_ACCESS_KEY_ID: minio_access_key
      S3_SECRET_ACCESS_KEY: minio123
      S3_BUCKET: workflow-data
      S3_ENDPOINT_URL: http://blobstorage:9000
      # S3_ENDPOINT_URL: http://minio:9000
      PYTHONPATH: /opt/utils
    volumes:
      - ./openfido-workflow-service:/opt/app:delegated
      - ./openfido-utils:/opt/utils:delegated
    ports:
      - "6001:5000"
    depends_on:
      - workflow-db
      - workflow-queue
      - blobstorage
  workflow-worker:
    build:
      context: openfido-workflow-service
      dockerfile: Dockerfile.worker
    command: celery -A app.worker worker -l DEBUG
    environment:
      CELERY_BROKER_URL: amqp://rabbit-user:rabbit-password@workflow-queue/api-queue
      WORKER_API_SERVER: http://workflow-service:5000
    env_file:
      - .worker-env
    volumes:
      - ./openfido-workflow-service:/opt/app:delegated
      - /var/run/docker.sock:/var/run/docker.sock
      # The 'docker in docker' nature of this local configuration means that
      # bind mounts happen on the 'host docker' not the first docker container.
      # Make temp directories on the main host (otherwise files cannot be
      # found).
      - /tmp:/tmp
    depends_on:
      - workflow-queue
      - workflow-service
      - blobstorage
  auth-db:
    image: postgres:11
    environment:
      POSTGRES_DB: accountservices
      POSTGRES_PASSWORD: dev-password
    volumes:
      - auth_data:/var/lib/postgresql/data

  auth-service:
    build: openfido-auth-service
    command: flask run -h 0.0.0.0
    environment:
      PGDATABASE: accountservices
      PGUSER: postgres
      PGHOST: auth-db
      FLASK_APP: run.py
      FLASK_ENV: development
      SECRET_KEY: local-dev-db
      SQLALCHEMY_DATABASE_URI: "postgresql://postgres:dev-password@auth-db/accountservices"
      S3_BUCKET: auth-service
      S3_ACCESS_KEY_ID: minio_access_key
      S3_SECRET_ACCESS_KEY: minio123
      S3_ENDPOINT_URL: http://blobstorage:9000
      # S3_ENDPOINT_URL: http://minio:9000
      PYTHONPATH: /opt/utils
    volumes:
      - ./openfido-auth-service:/opt/app:delegated
      - ./openfido-utils:/opt/utils:delegated
    ports:
      - "6002:5000"
    depends_on:
      - auth-db
      - blobstorage
  app-db:
    image: postgres:11
    environment:
      POSTGRES_DB: appservice
      POSTGRES_PASSWORD: dev-password
    volumes:
      - app_data:/var/lib/postgresql/data

  app-service:
    build: openfido-app-service
    environment:
      PGDATABASE: appservice
      PGUSER: postgres
      PGHOST: app-db
      FLASK_APP: run.py
      FLASK_ENV: development
      SECRET_KEY: local-dev-db
      SQLALCHEMY_DATABASE_URI: postgresql://postgres:dev-password@app-db/appservice
      S3_ACCESS_KEY_ID: minio_access_key
      S3_SECRET_ACCESS_KEY: minio123
      S3_BUCKET: app-data
      S3_ENDPOINT_URL: http://blobstorage:9000
      # S3_ENDPOINT_URL: http://minio:9000
      AUTH_HOSTNAME: http://auth-service:5000
      WORKFLOW_HOSTNAME: http://workflow-service:5000
      PYTHONPATH: /opt/utils
    env_file:
      - .workflow-env
    volumes:
      - ./openfido-app-service:/opt/app:delegated
      - ./openfido-utils:/opt/utils:delegated
    ports:
      - "6003:5000"
    depends_on:
      - app-db
      - auth-service
      - blobstorage
      - workflow-service
  react-client:
    stdin_open: true
    build: openfido-client
    environment:
      HOST: 0.0.0.0
    volumes:
      - ./openfido-client:/opt/app:delegated
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - app-service

volumes:
  app_data:
  auth_data:
  workflow_data:
  datastore: