
name: Terraform Staging Plan Apply

on: 
  push:
    branches: 
      - master
      - features/**
      - dependabot/**
  pull_request:
    branches: 
      - master
  workflow_dispatch:
     inputs:
      job:
        description: 'Destroy Terraform Staging.'
        required: true
        default: 'staging-destroy'
        
jobs:
  docker:
    name: Build and Push
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.1.6
    steps:
      - uses: actions/checkout@v2
      - name: Terraform Validate and Format
        id: validate
        run:  |
          cd deploy/
          terraform init -backend=false
          terraform validate
          terraform fmt -check

      - name: Configure AWS Credentials
        id: config-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Staging Plan 
        id: staging-plan
        if: steps.config-aws.outcome == 'success'
        run: |
          cd deploy/
          # pass variable into terraform 
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO_BASE_URL }}
          export TF_VAR_db_user=${{ secrets.TF_VAR_DB_USER }}
          export TF_VAR_db_password=${{ secrets.TF_VAR_DB_PASSWORD }}
          terraform init
          terraform workspace select staging || terraform workspace new staging
          terraform plan
      
      - name: Staging Apply 
        id: staging-apply
        if: steps.staging-plan.outcome == 'success'
        run: |
          cd deploy/
          # pass variable into terraform update
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO_BASE_URL }}
          export TF_VAR_db_user=${{ secrets.TF_VAR_DB_USER }}
          export TF_VAR_db_password=${{ secrets.TF_VAR_DB_PASSWORD }}
          terraform init
          terraform workspace select staging 
          terraform apply -auto-approve

